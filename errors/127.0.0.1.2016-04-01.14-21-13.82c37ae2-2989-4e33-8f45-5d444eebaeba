(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'email'"
p3
sS'layer'
p4
S'D:\\Development\\web2py\\applications\\Inwentaryzacja_TPI\\controllers/default.py'
p5
sS'code'
p6
S'from gluon import *\nme = auth.user_id\n##print "To jest moje id %s", me\ndef index():\n    ##wrt = db.executesql(\'SELECT Pracownicy.imie FROM Pracownicy WHERE Pracownicy.id == ?;\', (me,))\n    ## db.auth_user.id==db.Pracownicy.Zarejestrowany_Uzytkownik\n    return locals()\n\n#Panel admin dla Pracownikow /Widoczne Dodaj Pracownika\n@auth.requires_login()\ndef indexA():\n    if auth.user.id!=5:\n        redirect(URL(\'indexx\'))\n    return dict(message=T(\'Panel Administratora\'))\n\n##auth.user == db.auth_user.id==5:\n@auth.requires_login()\ndef indexx():\n    if auth.user.id==5:\n        redirect(URL(\'indexA\'))\n    else:\n        redirect(URL(\'Pracownicy\'))\n    ##Dla pracownikow\n    return locals()\n@auth.requires_login()\ndef indexxx():\n    ##Dla sprzetu\n    if auth.user.id==5:\n        redirect(URL(\'indexxxA\'))\n    return locals()\n\n#Panel Admin dla sprzet / Widoczne Dodaj Sprzet\n@auth.requires_login()\ndef indexxxA():\n    if auth.user.id!=5:\n        redirect(URL(\'indexxx\'))\n    xyz = db().select(db.auth_user.first_name)\n    return dict(xyz=xyz)\n\n#Wyswietla liste pracownikow dodanych\n@auth.requires_login()\ndef Pracownicy():\n    tabela = db().select(db.Pracownicy.ALL)\n    wrt = db().select(db.Dodaj_Sprzet.ALL)\n    abc = db.executesql(\'SELECT Dodaj_Sprzet.Model FROM Dodaj_Sprzet WHERE Dodaj_Sprzet.user_id IN(SELECT user_id FROM Pracownicy);\')\n    ##SQLFORM.smartgrid(db.Pracownicy)\n    return dict(tabela=tabela,wrt=wrt,abc=abc)\n\n#Edycja Pracownikow, sa wpisane juz dane\n@auth.requires_login()\ndef EdycjaPracownicyx():\n    if auth.user.id !=5:\n        redirect(URL(\'Pracownicy\'))\n        response.flash = T("Brak uprawnien!")\n    id = request.args(0,cast=int)\n    formd = SQLFORM(db.Pracownicy, id, showid=False).process(next=\'Pracownicy/[id]\')\n    return dict(formd=formd)\n\n#Edycja sprzetu, sa wpisane juz dane\n@auth.requires_login()\ndef EdycjaSprzetx():\n    if auth.user.id != 5:\n        redirect(URL(\'Sprzet\'))\n        response.flash = T("Brak uprawnien!")\n    id = request.args(0,cast=int)\n    formd = SQLFORM(db.Dodaj_Sprzet, id, showid=False).process(next=\'Sprzet/[id]\')\n    return dict(formd=formd)\n\ndef xaxaxa():\n    sprzet = db().select(db.Dodaj_Sprzet.ALL)\n    return dict(sprzet=sprzet)\n\n#def Pracownicy():\n#     par=P()\n#     Pracownicy = db(db.Pracownicy.id>0).select()\n#     for pracownicy in Pracownicy:\n#         par.append(pracownicy[\'Imie\'])\n#         par.append(pracownicy[\'Nazwisko\'])\n#         par.append(pracownicy[\'NumerIdentyfikacji\'])\n#         par.append(pracownicy[\'Stanowisko\'])\n#         par.append(pracownicy[\'Miejsce_Pracy\'])\n#         par.append(pracownicy[\'Rodzaj_Zatrudnienia\'])\n#         par.append(pracownicy[\'Nr_tel_Prywatny\'])\n#         par.append(pracownicy[\'Nr_tel_Sluzbowy\'])\n#     return dict(par=par)\n\n##@auth.requires_membership(\'Szef\')\n\n#Tworzenie Wpisu nie edycja\n@auth.requires_login()\ndef EdycjaPracownicy():\n    form = SQLFORM(db.Pracownicy,deletable=False, editable=False, details=False)\n    if form.process().accepted:\n        response.flash=\'Zapisano\'\n        redirect(URL(\'Pracownicy\'))\n    return dict(form=form)\n\n@auth.requires_login()\ndef Oczekujace():\n    xyz = db().select(db.auth_user.ALL)\n    sprzet = db().select(db.Zamowienie.ALL)\n    return dict(sprzet=sprzet,xyz=xyz)\n##{{ for abc in auth: }}{{db.executesql(\'SELECT aut_user.first_name FROM auth_user WHERE ? = ;\',(abc.id, new.Wlasciciel))}}\n\n#Wyswietla caly sprzet\ndef Sprzet():\n    wrt = db().select(db.Pracownicy.ALL)\n    sprzet = db().select(db.Dodaj_Sprzet.ALL)\n    return dict(sprzet=sprzet,wrt=wrt)\n\n@auth.requires_login()\ndef TwojeZamowienia():\n    mee = auth.user_id\n    zam = db().select(db.Zamowienie.ALL)\n    return dict(zam=zam, mee=mee)\n\n@auth.requires_membership(\'Administrator\')\ndef OczekujaceZamowienia():\n    sprzet = db().select(db.Zamowienie.ALL)\n    return dict(sprzet=sprzet)\n\n#Tworzenie Wpisu nie edycja\n@auth.requires_login()\ndef EdycjaSprzet():\n    forma = SQLFORM(db.Dodaj_Sprzet)\n    if forma.process().accepted:\n        redirect(URL(\'Sprzet\'))\n        response.flash=\'Zapisano\'\n        abc = db.executesql(\'SELECT auth_user.email FROM auth_user WHERE forma.user_id IN (SELECT auth_user.id FROM auth_user);\')\n        email = db.auth_user(forma.vars.Wlasciciel).email\n        mail.send(to=[abc],\n                  subject="Dostales nowy sprzet: %s" % forma.vars.Rodzaj_Sprzetu,\n                  message="""\n                  <html>\n                   <table style="width:600">\n                   <tr>\n                      <td  align="right"><strong>Rodzaj Sprzetu:</strong></td><td align="left">{}</td>\n                   </tr>\n                   <tr>\n                      <td  align="right"><strong>Model:</strong></td><td align="left">{}</td>\n                   </tr>\n                   <tr>\n                      <td  align="right"><strong>Serial number:</strong></td><td align="left">{}</td>\n                   </tr>\n                   <tr>\n                      <td  align="right"><strong>Lokalizacja:</strong></td><td align="left">{}</td>\n                   </tr>\n                      <td align="right"><strong>Przekierowanie na strone</strong></td><td align="left"><a href="http://127.0.0.1:8000/Inw/default/Oczekujace"><button>Oczekujace</button></a></td>\n                   </table>\n                   </html>\n                   """.format(forma.vars.Rodzaj_Sprzetu,\n                              forma.vars.Model,\n                              forma.vars.Nr_Inw,\n                              forma.vars.Lokalizacja),\n                  )\n        redirect(URL(\'Sprzet\'))\n    return dict(forma=forma)\n\n@auth.requires_login()\ndef Zamowienie():\n    wrt = SQLFORM(db.Zamowienie)\n    if wrt.process().accepted:\n        response.flash=\'Zapisano\'\n        message=T(\'Zgloszenie wyslano\')\n        email = db.auth_user(wrt.vars.Wlasciciel).email\n        mail.send(to=["m.mlynarczyk24@gazeta.pl"],\n                  subject="Zlozono zapotrzebowanie na nowy sprzet",\n                  message="""\n                  <html>\n                   <table style="width:600">\n                   <tr>\n                      <td  align="right"><strong>Potrzebny sprzet:</strong></td><td align="left">{}</td>\n                   </tr>\n                   <tr>\n                      <td  align="right"><strong>Ilosc:</strong></td><td align="left">{}</td>\n                   </tr>\n                   <tr>\n                      <td  align="right"><strong>Osoba skladajaca zamowienie:</strong></td><td align="left">{}{}</td>\n                   </tr>\n                   <tr>\n                      <td  align="right"><strong>Dodatkowy opis:</strong></td><td align="left">{}</td>\n                   </tr>\n                      <td align="right"><strong>Przekierowanie na strone</strong></td><td align="left"><a href="http://127.0.0.1:8000/Inw/default/Oczekujace"><button>Oczekujace</button></a></td>\n                   </table>\n                   </html>\n                   """.format(wrt.vars.Rodzaj_Sprzetu,\n                              wrt.vars.Ilosc,\n                              db.executesql(\'SELECT auth_user.first_name FROM auth_user WHERE ? ==auth_user.id;\', (me,)),\n                              db.executesql(\'SELECT auth_user.last_name FROM auth_user WHERE ? ==auth_user.id;\', (me,)),\n                              wrt.vars.Dodatkowy_opis),\n                  )\n        redirect(URL(\'index\'))\n    return dict(wrt=wrt)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login()\ndef DodawanieLicencji():\n    ##Dodawnie licencji do bazy danych\n    if auth.user.id!=5:\n        redirect(URL(\'index\'))\n        response.flash = T("Brak uprawnien!")\n    wrt = SQLFORM(db.Licencje)\n    if wrt.process().accepted:\n        response.flash=\'Zapisano\'\n        redirect(URL(\'Licencje\'))\n    return dict(wrt=wrt)\n\n@auth.requires_login()\ndef Licencje():\n    ##Wyswietlanie stanu licencji:\n    if auth.user.id!=5:\n        redirect(URL(\'index\'))\n        response.flash = T("Brak uprawnien!")\n    wrt = db().select(db.Licencje.ALL)\n    return dict(wrt=wrt)\n@auth.requires_login()\ndef TwojSprzet():\n    ##Wyswietla sprzet przypisany do zalogowanego uzytkownika\n    wrt = db().select(db.Dodaj_Sprzet.ALL)\n    return dict(wrt=wrt)\n\nresponse._vars=response._caller(Zamowienie)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "D:\\Development\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "D:\\Development\\web2py\\applications\\Inwentaryzacja_TPI\\controllers/default.py", line 258, in <module>\n  File "D:\\Development\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "D:\\Development\\web2py\\gluon\\tools.py", line 4236, in f\n    return action(*a, **b)\n  File "D:\\Development\\web2py\\applications\\Inwentaryzacja_TPI\\controllers/default.py", line 165, in Zamowienie\n    email = db.auth_user(wrt.vars.Wlasciciel).email\nAttributeError: \'NoneType\' object has no attribute \'email\'\n'
p11
s.